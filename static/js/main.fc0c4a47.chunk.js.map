{"version":3,"sources":["Calc.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Calc","props","space","margin","span","padding","label","fontWeight","flex","display","justifyContent","width","spaceflex","state","val_sum","loss","min","max","num","amount","doChangeLoss","bind","doChangeMin","doChangeMax","doChangeNum","doChangeAmount","doChange","e","sum","this","setState","target","value","AppBar","position","Toolbar","Typography","variant","noValidate","autoComplete","style","TextField","type","onChange","InputLabelProps","shrink","InputProps","endAdornment","InputAdornment","Button","onClick","toLocaleString","React","Component","App","wrap","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc0c4a47.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Button from \"@material-ui/core/Button\";\n\n// 計算用のコンポーネント\nclass Calc extends React.Component {\n  // styleを設定\n  space = {\n    margin: \"40px\",\n  };\n\n  span = {\n    padding: \"20px\",\n  };\n\n  label = {\n    fontWeight: \"bold\",\n  };\n\n  flex = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    width: \"80%\",\n  };\n\n  spaceflex = {\n    margin: \"40px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"0 auto\",\n    width: \"80%\",\n  };\n\n  // 初期化処理\n  constructor(props) {\n    super(props);\n    this.state = {\n      val_sum: 0,\n      loss: \"\",\n      min: \"\",\n      max: \"\",\n      num: \"\",\n      amount: \"\",\n    };\n\n    this.doChangeLoss = this.doChangeLoss.bind(this);\n    this.doChangeMin = this.doChangeMin.bind(this);\n    this.doChangeMax = this.doChangeMax.bind(this);\n    this.doChangeNum = this.doChangeNum.bind(this);\n    this.doChangeAmount = this.doChangeAmount.bind(this);\n    this.doChange = this.doChange.bind(this);\n  }\n\n  // 変更された時に実行\n  doChange(e) {\n    const margin =\n      (this.state.loss * this.state.amount * this.state.num * 10000) / 25;\n    const losscut =\n      (this.state.max -\n        (this.state.max - this.state.min) / 2 -\n        this.state.loss) *\n      this.state.num *\n      this.state.amount *\n      10000;\n    const sum = margin + losscut;\n    this.setState({\n      val_sum: sum,\n    });\n  }\n\n  // lossの値が変更された時に実行\n  doChangeLoss(e) {\n    this.setState({\n      loss: e.target.value,\n    });\n  }\n\n  // minの値が変更された時に実行\n  doChangeMin(e) {\n    this.setState({\n      min: e.target.value,\n    });\n  }\n\n  // maxの値が変更された時に実行\n  doChangeMax(e) {\n    this.setState({\n      max: e.target.value,\n    });\n  }\n\n  // numの値が変更された時に実行\n  doChangeNum(e) {\n    this.setState({\n      num: e.target.value,\n    });\n  }\n\n  // amountの値が変更された時に実行\n  doChangeAmount(e) {\n    this.setState({\n      amount: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h5\">Toraripi Money Management</Typography>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <h2>トラリピ必要資金計算表</h2>\n        <p>\n          ロスカット値を設定しましょう。\n          <br />\n          必要な資金を計算します。\n        </p>\n        <form noValidate autoComplete=\"off\">\n          <div style={this.space}>\n            <TextField\n              label=\"ロスカット値\"\n              type=\"number\"\n              onChange={this.doChangeLoss}\n              value={this.state.loss}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              InputProps={{\n                endAdornment: <InputAdornment>円</InputAdornment>,\n              }}\n            />\n          </div>\n          <div style={this.spaceflex}>\n            <TextField\n              label=\"レンジ下値\"\n              type=\"number\"\n              onChange={this.doChangeMin}\n              value={this.state.min}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">円</InputAdornment>\n                ),\n              }}\n            />\n            <span style={this.span}>〜</span>\n            <TextField\n              label=\"レンジ上値\"\n              type=\"number\"\n              onChange={this.doChangeMax}\n              value={this.state.max}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              InputProps={{\n                endAdornment: <InputAdornment>円</InputAdornment>,\n              }}\n            />\n          </div>\n        </form>\n        <div style={this.space}>\n          <TextField\n            label=\"トラップ本数\"\n            type=\"number\"\n            onChange={this.doChangeNum}\n            value={this.state.num}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment>本</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={this.space}>\n          <TextField\n            label=\"注文金額\"\n            type=\"number\"\n            onChange={this.doChangeAmount}\n            value={this.state.amount}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment>万通貨</InputAdornment>,\n            }}\n          />\n        </div>\n        <div>\n          <Button variant=\"outlined\" onClick={this.doChange}>\n            計算する\n          </Button>\n        </div>\n        <p style={this.space}>\n          ロスカットされないためには、資金が\n          <span style={this.label}>\n            {\" \"}\n            {this.state.val_sum.toLocaleString()}円{\" \"}\n          </span>\n          必要です。\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Calc;\n","import React from \"react\";\nimport Calc from \"./Calc\";\n\n// Appコンポーネント\nclass App extends React.Component {\n  // styleを設定\n  wrap = {\n    width: \"100%\",\n    margin: \"0 auto\",\n    textAlign: \"center\",\n  };\n\n  render() {\n    return (\n      <div style={this.wrap}>\n        <Calc />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}